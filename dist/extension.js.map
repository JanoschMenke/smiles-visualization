{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://smiles-visualization/./src/extension.ts","webpack://smiles-visualization/external commonjs \"vscode\"","webpack://smiles-visualization/webpack/bootstrap","webpack://smiles-visualization/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\n\n\nlet decorationType: vscode.TextEditorDecorationType;\nlet currentPanel: vscode.WebviewPanel | undefined = undefined;\n\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('RDKit Molecule Viewer extension is now active');\n\n    // Create a decoration type for highlighting valid SMILES strings\n    decorationType = vscode.window.createTextEditorDecorationType({\n        backgroundColor: 'rgba(100, 200, 255, 0.1)',\n        border: '1px solid rgba(100, 200, 255, 0.5)'\n    });\n\n    // Register the command to show molecule from selected SMILES\n    let disposable = vscode.commands.registerCommand('rdkit-viewer.showMolecule', () => {\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) return;\n\n        const selection = editor.selection;\n        if (selection.isEmpty) return;\n\n        const selectedText = editor.document.getText(selection);\n        if (!validateSmiles(selectedText)) {\n            vscode.window.showInformationMessage('Selected text is not a valid SMILES string.');\n            return;\n        }\n\n        showMoleculeViewer(context.extensionUri, selectedText, editor, selection);\n    });\n\n    vscode.languages.registerHoverProvider({ pattern: '**/*' }, {\n        provideHover(document, position, token) {\n            const range = document.getWordRangeAtPosition(position, /[A-Za-z][A-Za-z0-9@+\\-\\[\\]\\(\\)\\\\\\/%.=#]*/g) || \n            document.getWordRangeAtPosition(position, /\\S+/);\n            if (!range) return null;\n            \n            const text = document.getText(range);\n            if (validateSmiles(text)) {\n                const commandUri = vscode.Uri.parse(\n                    `command:rdkit-viewer.showSmilesFromHover?${encodeURIComponent(JSON.stringify([text]))}`\n                );\n\n                vscode.commands.executeCommand('rdkit-viewer.showSmilesFromHover', text);\n\n                return null; \n            }\n            return null;\n        }\n    });\n\n    context.subscriptions.push(\n        vscode.commands.registerCommand('rdkit-viewer.showSmilesFromHover', (smilesString: string) => {\n            const editor = vscode.window.activeTextEditor;\n            if (!editor) return;\n            \n            showMoleculeViewer(context.extensionUri, smilesString, editor, editor.selection);\n        })\n    );\n\n    vscode.window.onDidChangeTextEditorSelection(event => {\n        const editor = event.textEditor;\n        const selection = editor.selection;\n        \n        // Clear previous decorations\n        editor.setDecorations(decorationType, []);\n        \n        if (selection.isEmpty) {\n            if (currentPanel) {\n                currentPanel.dispose();\n                currentPanel = undefined;\n            }\n            return;\n        }\n        \n        const selectedText = editor.document.getText(selection);\n        if (validateSmiles(selectedText)) {\n            // Highlight the valid SMILES string\n            editor.setDecorations(decorationType, [selection]);\n            \n            // Automatically show the molecule\n            showMoleculeViewer(context.extensionUri, selectedText, editor, selection);\n        } else if (currentPanel) {\n            currentPanel.dispose();\n            currentPanel = undefined;\n        }\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nfunction showMoleculeViewer(\n    extensionUri: vscode.Uri, \n    smilesString: string, \n    editor: vscode.TextEditor, \n    selection: vscode.Selection\n) {\n    // Calculate position for the panel near the selection\n    const position = editor.selection.active;\n    const positionInEditor = editor.visibleRanges[0].start;\n\n    // Create a new panel if it doesn't exist, otherwise reuse it\n    if (!currentPanel) {\n        currentPanel = vscode.window.createWebviewPanel(\n            'rdkitMoleculeViewer',\n            'Molecule Viewer',\n            {\n                viewColumn: vscode.ViewColumn.Beside,\n                preserveFocus: true\n            },\n            {\n                enableScripts: true,\n                localResourceRoots: [extensionUri]\n            }\n        );\n\n        // Handle closing the panel\n        currentPanel.onDidDispose(() => {\n            currentPanel = undefined;\n        });\n    }\n\n    const rdkitJsUri = vscode.Uri.joinPath(extensionUri, 'dist', 'rdkit', 'RDKit_minimal.js');\n    const rdkitPath = currentPanel.webview.asWebviewUri(rdkitJsUri);\n\n    // Update the HTML content for the webview\n    currentPanel.webview.html = getWebviewContent(smilesString, rdkitPath.toString());\n}\n\nfunction getWebviewContent(smilesString: string, rdkitPath: string): string {\n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>RDKit Molecule Viewer</title>\n    <style>\n        body {\n            padding: 0;\n            margin: 0;\n            background-color: transparent;\n        }\n        .container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 10px;\n        }\n        #molecule-display {\n            width: 300px;\n            height: 250px;\n            border: 1px solid #ccc;\n            margin-bottom: 10px;\n            background-color: white;\n        }\n        .smiles-text {\n            font-family: monospace;\n            margin-bottom: 10px;\n            word-break: break-all;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div id=\"molecule-display\"></div>\n        <div class=\"smiles-text\">${smilesString}</div>\n    </div>\n\n    <script src=\"${rdkitPath}\"></script>\n    <script>\n        // Initialize RDKit\n        window.onload = async function() {\n            // Initialize RDKit\n            try {\n                const RDKit = await window.initRDKitModule();\n                const smiles = '${smilesString.replace(/'/g, \"\\\\'\")}';\n                console.log('SMILES string:', smiles);\n                // Create molecule from SMILES\n                const mol = RDKit.get_mol(smiles);\n                \n                if (mol) {\n                    // Generate SVG and display molecule\n                    const svg = mol.get_svg(300, 250);\n                    document.getElementById('molecule-display').innerHTML = svg;\n                    \n                    // Clean up\n                    mol.delete();\n                } else {\n                    document.getElementById('molecule-display').innerHTML = \n                        '<div style=\"color: red; text-align: center; padding-top: 100px;\">Invalid SMILES string</div>';\n                }\n            } catch (error) {\n                console.error('Error initializing RDKit:', error);\n                document.getElementById('molecule-display').innerHTML = \n                    '<div style=\"color: red; text-align: center; padding-top: 100px;\">Error loading RDKit</div>';\n            }\n        };\n    </script>\n</body>\n</html>`;\n}\n\n\nexport function validateSmiles(smiles: string): boolean {\n\n    const smilesRegex = /^([^J](?:B(?:r)[0-9BCOHNSOPIF@+\\-\\[\\]\\(\\)\\\\\\/%=#$]{2,}|[0-9COHNSOPIF@+\\-\\[\\]\\(\\)\\\\\\/%=#$]{3,}))$/ig\n    return smilesRegex.test(smiles.trim());\n}\n\nexport function deactivate() {\n    if (currentPanel) {\n        currentPanel.dispose();\n    }\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","decorationType","vscode","window","createTextEditorDecorationType","backgroundColor","border","disposable","commands","registerCommand","editor","activeTextEditor","selection","isEmpty","selectedText","document","getText","validateSmiles","showMoleculeViewer","extensionUri","showInformationMessage","languages","registerHoverProvider","pattern","provideHover","position","token","range","getWordRangeAtPosition","text","Uri","parse","encodeURIComponent","JSON","stringify","executeCommand","subscriptions","push","smilesString","onDidChangeTextEditorSelection","event","textEditor","setDecorations","currentPanel","dispose","undefined","active","visibleRanges","start","createWebviewPanel","viewColumn","ViewColumn","Beside","preserveFocus","enableScripts","localResourceRoots","onDidDispose","rdkitJsUri","joinPath","rdkitPath","webview","asWebviewUri","html","replace","getWebviewContent","toString","smiles","test","trim","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}